<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A. Amar</title>
    <link>https://abdelkaderamar.github.io/post/blog/</link>
    <description>Recent content on A. Amar</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>abdelkader.amar@gmail.com (Abdelkader Amar)</managingEditor>
    <webMaster>abdelkader.amar@gmail.com (Abdelkader Amar)</webMaster>
    <lastBuildDate>Tue, 21 Aug 2018 10:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://abdelkaderamar.github.io/post/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;17 : Résumé des nouveautés du langage (&#43;Cheatsheet)</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/08/c--17--r%C3%A9sum%C3%A9-des-nouveaut%C3%A9s-du-langage--cheatsheet/</link>
      <pubDate>Tue, 21 Aug 2018 10:00:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/08/c--17--r%C3%A9sum%C3%A9-des-nouveaut%C3%A9s-du-langage--cheatsheet/</guid>
      <description>Ce post est similaire à celui déjà posté sur le C++14 mais concerne comme le titre l&amp;rsquo;indique les nouveautés de la norme C++17 pour le langage (et non la STL qui sera traité dans un autre article). Les exemples sont disponibles dans ce repository.
J&amp;rsquo;ai également réalisé une cheatsheet qui peut être téléchargéé ci-dessous :
Download
PDF (A4) | Latex
Déduction des arguments des templates de classe Avant le C++17, la déduction des types des templates était possible uniquement pour les fonctions, mais pas pour les classes.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;14 : Résumé des nouveautés du langage (&#43;Cheatsheet)</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/07/c--14--r%C3%A9sum%C3%A9-des-nouveaut%C3%A9s-du-langage--cheatsheet/</link>
      <pubDate>Thu, 19 Jul 2018 17:15:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/07/c--14--r%C3%A9sum%C3%A9-des-nouveaut%C3%A9s-du-langage--cheatsheet/</guid>
      <description>La norme C++14 qui a été standardisée il y a déjà quatre ans, est considérée comme mineure si on la compare au C++11 et le C++17. Dans ce post, je vais décrire brièvement les changements apportés au langage (mais pas la STL). Des programmes exemples son disponible dans ce projet.
J&amp;rsquo;ai également réalisé une cheatsheet qui peut être télécharger ci-dessous :
Download
PDF (A4) | Latex
auto f(...) : type de retour de fonction auto Il est possible avec la norme C++14 de déclarer des fonctions avec un type de retour auto.</description>
    </item>
    
    <item>
      <title>AV.NET : Une bibliothèque C# pour AlphaVantage</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/07/av.net--une-biblioth%C3%A8que-c#-pour-alphavantage/</link>
      <pubDate>Wed, 11 Jul 2018 11:31:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/07/av.net--une-biblioth%C3%A8que-c#-pour-alphavantage/</guid>
      <description>Introduction AlphaVantage est un service web qui donne la possibilité de récupérer (gratuitement) des données historiques sur des instruments financiers.
Pour les actions, ce service (qui rappelle le défunt Yahoo Finance) offre une API web REST pour consulter les données suivantes : - Données intraday : OHLC (Open, High, Low et Close) et volume de la journée courante (ou précédente si le marché est fermée). On doit préciser l&amp;rsquo;intervalle de temps (1, 5, 15, 30 ou 60 minutes) et le nombre de données à récupérer (les 100 dernières par défaut ou toute la journée).</description>
    </item>
    
    <item>
      <title>C&#43;&#43;17 : Fold Expressions</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/06/c--17--fold-expressions/</link>
      <pubDate>Wed, 13 Jun 2018 23:48:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/06/c--17--fold-expressions/</guid>
      <description>Le C++ a introduit dans la norme C++11 les variadic templates qui permettent d&amp;rsquo;écrire des fonctions templates avec un nombre variable de paramètres. Leur utilisation passait par l&amp;rsquo;écriture d&amp;rsquo;une fonction récursive. Par exemple pour écrire une fonction qui calcule la somme d&amp;rsquo;un nombre variable de paramètres, on pouvait faire ceci :
auto sum() { return 0; } template&amp;lt;typename T, typename ... Ts&amp;gt; auto sum(const T&amp;amp; t, const Ts&amp;amp; ... ts) { return t + sum(ts .</description>
    </item>
    
    <item>
      <title>La bibliothèque *Benchmark*</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/06/la-biblioth%C3%A8que-benchmark/</link>
      <pubDate>Wed, 06 Jun 2018 21:30:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/06/la-biblioth%C3%A8que-benchmark/</guid>
      <description>Introduction Benchmark est une bibliothèque C++ développée par Google pour faire des mesures de performances de fonctions. Son installation sous linux peut se faire soit par compilation du code source disponible sur Github ou si la distribution la propose en utilisant le gestionnaire de package. Ubuntu dans sa version 18.1 propose la version 1.36 dans ses sources apt.
utilisation L&amp;rsquo;utilisation de base est simple. On commence par une fonction qui a le prototype suivant :</description>
    </item>
    
    <item>
      <title>Utilisation de *Boost Multi-index*</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/05/utilisation-de-boost-multi-index/</link>
      <pubDate>Wed, 16 May 2018 21:30:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/05/utilisation-de-boost-multi-index/</guid>
      <description>Introduction Boost Multi-Index est une librairie qui fournit un type de conteneur de données appelé multi_index_container. La particularité de ce type est de fournir un ou plusieurs index permettant ainsi plusieurs méthodes d&amp;rsquo;accès dans le même conteneur. Par exemple, on peut indexer des données en définissant deux clés distinctes. Avec les conteneurs STL, il faut utiliser deux map, une pour chaque clé et s&amp;rsquo;assurer que les deux conteneurs sont mis à jours simultanément.</description>
    </item>
    
    <item>
      <title>Gitea, une forge Git simple et rapide</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/05/gitea-une-forge-git-simple-et-rapide/</link>
      <pubDate>Sat, 12 May 2018 12:01:50 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/05/gitea-une-forge-git-simple-et-rapide/</guid>
      <description>Gitea est un outil permettant d&amp;rsquo;héberger un service de forge utilisant Git. Il est similaire à Gitlab ou Github. La première chose qu&amp;rsquo;on note en l&amp;rsquo;essayant est la facilité avec laquelle il s&amp;rsquo;installe. Le logiciel se présente sous la forme d&amp;rsquo;un seule binaire et son installation se résume à quelques étapes de configuration via l&amp;rsquo;interface web. Il supporte plusieurs base de données dont SQLite.
Une fois lancé, il faut ouvrir la page http://localhost:3000 et configurer le service.</description>
    </item>
    
    <item>
      <title>GCC 8.1 : Nouveautés du langage C&#43;&#43;</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/05/gcc-8.1--nouveaut%C3%A9s-du-langage-c--/</link>
      <pubDate>Tue, 08 May 2018 17:03:31 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/05/gcc-8.1--nouveaut%C3%A9s-du-langage-c--/</guid>
      <description>Introduction La version 8.1 du compilateur GCC est sortie le 25 Avril 2018. Les nouveautés de cette version pour les différents langages sont disponibles ici. Dans ce post, nous allons voir les nouveautés qui concernent le langage C++.
Support expériemental de certaines fonctionalités du prochain standard C++2a Le compilateur propose les options -std=c++2a ou std=gnu++2a pour utiliser certaines fonctionalités du standard C++2a en cours de finalisation.
C++2a (langage) Initialisation par défaut des membres de type bit Les membres de classes/structures de type bit peuvent avoir leur initialisation par défaut.</description>
    </item>
    
  </channel>
</rss>