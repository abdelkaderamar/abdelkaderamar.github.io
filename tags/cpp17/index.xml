<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp17 on A. Amar</title>
    <link>https://abdelkaderamar.github.io/tags/cpp17/</link>
    <description>Recent content in Cpp17 on A. Amar</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>abdelkader.amar@gmail.com (Abdelkader Amar)</managingEditor>
    <webMaster>abdelkader.amar@gmail.com (Abdelkader Amar)</webMaster>
    <lastBuildDate>Tue, 21 Aug 2018 10:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://abdelkaderamar.github.io/tags/cpp17/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;17 : Résumé des nouveautés du langage (&#43;Cheatsheet)</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/08/c-17-r%C3%A9sum%C3%A9-des-nouveaut%C3%A9s-du-langage-cheatsheet/</link>
      <pubDate>Tue, 21 Aug 2018 10:00:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/08/c-17-r%C3%A9sum%C3%A9-des-nouveaut%C3%A9s-du-langage-cheatsheet/</guid>
      <description>Ce post est similaire à celui déjà posté sur le C++14 mais concerne comme le titre l&amp;rsquo;indique les nouveautés de la norme C++17 pour le langage (et non la STL qui sera traité dans un autre article). Les exemples sont disponibles dans ce repository.
J&amp;rsquo;ai également réalisé une cheatsheet qui peut être téléchargéé ci-dessous :
Download
PDF (A4) | Latex
Déduction des arguments des templates de classe Avant le C++17, la déduction des types des templates était possible uniquement pour les fonctions, mais pas pour les classes.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;17 : Fold Expressions</title>
      <link>https://abdelkaderamar.github.io/post/blog/2018/06/c-17-fold-expressions/</link>
      <pubDate>Wed, 13 Jun 2018 23:48:00 +0000</pubDate>
      <author>abdelkader.amar@gmail.com (Abdelkader Amar)</author>
      <guid>https://abdelkaderamar.github.io/post/blog/2018/06/c-17-fold-expressions/</guid>
      <description>Le C++ a introduit dans la norme C++11 les variadic templates qui permettent d&amp;rsquo;écrire des fonctions templates avec un nombre variable de paramètres. Leur utilisation passait par l&amp;rsquo;écriture d&amp;rsquo;une fonction récursive. Par exemple pour écrire une fonction qui calcule la somme d&amp;rsquo;un nombre variable de paramètres, on pouvait faire ceci :
auto sum() { return 0; } template&amp;lt;typename T, typename ... Ts&amp;gt; auto sum(const T&amp;amp; t, const Ts&amp;amp; ... ts) { return t + sum(ts .</description>
    </item>
    
  </channel>
</rss>